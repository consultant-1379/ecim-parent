grammar com.ericsson.ecim.Optionality with org.eclipse.xtext.common.Terminals

//Please read http://blog.efftinge.de/2010/08/parsing-expressions-with-xtext.html
//Our grammar has left associativity
//The operator precedence is based on delegation where the last delegate has the highest precedence i.e. And then Or

//import "http://www.eclipse.org/uml2/3.0.0/UML" as uml
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate optionality "http://www.ericsson.com/ecim/Optionality"

Model:
	statements+=Statement?;

Statement:
	{Statement} 'if-feature' expression+=OrExpression?;

OrExpression returns Expression:
	AndExpression ({OrExpression.left=current} 'OR' right=AndExpression)*;

AndExpression returns Expression:
	NotExpression ({AndExpression.left=current} 'AND' right=NotExpression)*;
	
NotExpression returns Expression:
    Feature | ({NotExpression} 'NOT' right=Feature);  
	
Feature returns Expression :
//	ref=[uml::Class|FQN] | '(' OrExpression ')';//improve this with a scope restriction for a stereotype match
	ref=FQNSpaces | '(' OrExpression ')';//improve this with a scope restriction for a stereotype match


FQNSpaces returns ecore::EString:
    FQN | STRING ("." STRING)*
;	
	
FQN returns ecore::EString:
    ID ("." ID)*
;	

//Feature:
//	name=ID;//Note this should be a reference to a Class which has a stereotype feature. We will need a scoper for this	