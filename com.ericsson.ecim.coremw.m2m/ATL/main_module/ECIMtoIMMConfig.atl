-- /**
-- * This transform takes an ECIM compliant model (UML) as input and generates an imm.ecore compliant output.
-- * 
-- * The output of this transform contains the valid IMM Config XML.
-- * The IMM Config defines the initial configuration for a SAF based node.
-- * 
-- * The transform is modularised so you need to ensure a number of dependencies are added in the launch.
-- * These dependencies are added in the launcher via superimposition. The dependencies are listed below.
-- * 
-- * superimposition-dependencies: CommonRules 
-- * library-dependencies: HelperFunctions
-- *
-- * Note: A Parameter Model compliant to PARAM may be passed in. This model defines which type
-- * of IMM XML to generate i.e. Which Schema type
-- *
-- * Author: Ronan Barrett
-- * Date: 27/04/2010
-- */

-- @atlcompiler atl2006
-- @nsURI UML=http://www.eclipse.org/uml2/2.1.0/UML
-- @nsURI IMM=http://www.saforum.org/IMMSchema
-- @nsURI PARAM=http://ericsson.com/ECIM/ParameterModel

module ECIMtoIMMConfig;
create OUT : IMM from IN : UML, IN2 : PARAM;

uses HelperFunctions;

--Match the UML packages (MOMs) and relate to an IMM MOMs
rule EcimMOMToIMMContentsType
{
	--from s: UML!Package(s.oclIsTypeOf(UML!Package) and s.hasStereotype('ECIM Base Profile::EcimInstances'))--This will be used when the Launcher is refactored for performance
	from s: UML!Package(s.oclIsTypeOf(UML!Package) and s.hasStereotype('ECIM Base Profile::EcimInstances') and s.__xmiID__ = thisModule.getXmiId())	
	to dr : IMM!DocumentRoot
	(
		iMMContents <- ict
	),
	ict: IMM!IMMContentsType
	(
		--as instances are always in a package that is contained in a package we must use the parent package as
		--the MOM name
		--assign all the InstanceSpecification in the MOM/Package to the IMM MOM
		object <- s.allOwnedElements()->select(e|e.oclIsTypeOf(UML!InstanceSpecification) and e.getSourceDirectedRelationships()->size() = 0),
		object <- s.allOwnedElements()->select(e|e.oclIsTypeOf(UML!Dependency) and e.hasStereotype('ECIM Base Profile::EcimInstanceDependency'))
	)
	do 
	{
		dr.setSchemaLocation('http://www.saforum.org/IMMSchema',thisModule.getImmSchemaName());
	}
}


--Match the UML InstanceSpecification (MOC instances) that own no dependencies and relate to an IMM ObjectDefs
--Note:This rule is very restrictive as we normally use the UML Dependency to drive the building of the instances in the XML
rule InstanceSpecificationToObjectDef
{
	from s: UML!InstanceSpecification(s.oclIsTypeOf(UML!InstanceSpecification) and s.getSourceDirectedRelationships()->size() = 0)
	to t: IMM!ObjectDef
	(
		--get the name of the class of which this is an instance, it will always be the first one
		-- Uncomment line below when problem with SDP 751 has been resoved!
		class <- thisModule.getObjectClassName(s),
		-- Remove line below when problem with SDP 751 has been resoved!
	    --class <- thisModule.getObjectClassName(s.classifier.first()),	
		
		--build up the distinguished name
		dn <- thisModule.dnBuilder(s, OclUndefined, '', true),
		
		--assign attributes and values to the object	
		attr <- s.allOwnedElements()->select(e|e.oclIsTypeOf(UML!Slot))->select(e|not e.definingFeature.isNameGiving())->collect(e|thisModule.SlotToAttrType(e))
	)
}

--Match the UML Dependency that link InstanceSpecification and relate to an IMM ObjectDefs
--Note:We need this rule as any given InstanceSpecification can own many Dependency relationships e.g. A singleton
rule DependencyToObjectDef
{

	from s: UML!Dependency(s.oclIsTypeOf(UML!Dependency) and s.hasStereotype('ECIM Base Profile::EcimInstanceDependency'))
	to t: IMM!ObjectDef
	(
		--get the name of the class of which this is an instance, it will always be the first one
		class <- thisModule.getObjectClassName(s.client->first()),
		
		--build up the distinguished name
		dn <- thisModule.dnBuilder(s.client->first(), s, '', true),
		
		--assign attributes and values to the object	
		attr <- s.client->first().allOwnedElements()->select(e|e.oclIsTypeOf(UML!Slot))->select(e|not e.definingFeature.isNameGiving())->collect(e|thisModule.SlotToAttrType(e))
	)
}

--Match the UML Slot (MOC attribute instances) and relate to an IMM AttrTypes
--Note:name giving attributes (key attributes) are ignored
--Note:attributes must belong to config category class (readwrite MOCs)
lazy rule SlotToAttrType
{
	from s: UML!Slot(s.oclIsTypeOf(UML!Slot) and not s.definingFeature.isNameGiving())
	to t: IMM!AttrType
	(
		--the name of the attribute comes from the class that defines the attribute
		name <- s.definingFeature.name,
		--assign a value to the slot.
		value <- thisModule.assignDefaultValue(s)
	)
}