-- /**
-- * This transform takes a YANG model as input and generates a ECIM compliant model (UML) as output.
-- * NOTE: All restrictions should be noted here
-- * 
-- * superimposition-dependencies: 
-- * library-dependencies: HelperFunctions.atl
-- * Yang Model Dependencies: ericsson-yang-extensions.yang
-- *
-- * Author: Ronan Barrett
-- * Date: 22/08/2014
-- */

-- ECIMMM must be pathmap://ECIM_BASE_PROFILE/ECIM_Base_Profile.profile.uml in launcher
-- @nsURI UML=http://www.eclipse.org/uml2/2.1.0/UML
-- @nsURI YANG=http://www.ericsson.com/2010/Yang

module CreateDefault;

--Note:IN2 is for the augments model. One must be present if we do it like this. We could alternatively write a HOT to allow many augment files in. We also need to
--think about how this will be called via the GUI/CLI
create OUT : UML from IN : YANG, ECIM_MM : UML, YANG_MM : UML, ECIM_DT : UML, ECIM : UML, YANG_GM : UML, IN2 : YANG,-- IN3 : YANG
	IN3: YANG, IN4: YANG, IN5: YANG, IN6: YANG, IN7: YANG, IN8: YANG, IN9: YANG, IN10: YANG, 
	IN11: YANG, IN12: YANG, IN13: YANG, IN14: YANG, IN15: YANG, IN16: YANG, IN17: YANG, IN18: YANG, IN19: YANG, IN20: YANG, 
	IN21: YANG, IN22: YANG, IN23: YANG, IN24: YANG, IN25: YANG, IN26: YANG, IN27: YANG, IN28: YANG, IN29: YANG, IN30: YANG, 
	IN31: YANG, IN32: YANG, IN33: YANG, IN34: YANG, IN35: YANG, IN36: YANG, IN37: YANG, IN38: YANG, IN39: YANG, IN40: YANG, 
	IN41: YANG, IN42: YANG, IN43: YANG, IN44: YANG, IN45: YANG, IN46: YANG, IN47: YANG, IN48: YANG, IN49: YANG, IN50: YANG, 
	IN51: YANG, IN52: YANG, IN53: YANG, IN54: YANG, IN55: YANG, IN56: YANG, IN57: YANG, IN58: YANG, IN59: YANG, IN60: YANG, 
	IN61: YANG, IN62: YANG, IN63: YANG, IN64: YANG, IN65: YANG, IN66: YANG, IN67: YANG, IN68: YANG, IN69: YANG, IN70: YANG, 
	IN71: YANG, IN72: YANG, IN73: YANG, IN74: YANG, IN75: YANG, IN76: YANG, IN77: YANG, IN78: YANG, IN79: YANG, IN80: YANG, 
	IN81: YANG, IN82: YANG, IN83: YANG, IN84: YANG, IN85: YANG, IN86: YANG, IN87: YANG, IN88: YANG, IN89: YANG, IN90: YANG, 
	IN91: YANG, IN92: YANG, IN93: YANG, IN94: YANG, IN95: YANG, IN96: YANG, IN97: YANG, IN98: YANG, IN99: YANG, IN100: YANG; 

uses HelperFunctions;

rule CreateDefault(leaf : YANG!Leaf)
{
	using
	{
		--unpack the named type, if possible, and defaultValue.
		namedType : YANG!Type = if leaf.type.oclIsKindOf(YANG!NamedElement) then thisModule.getType(leaf) else OclUndefined endif;
		defaultValue : YANG!Value = thisModule.getDefaultValue(leaf);
	
		--Prepare a bunch of types. We only assign and return the type that matches the default
		s :UML!LiteralString = OclUndefined;
		i :UML!LiteralInteger = OclUndefined; 
		b :UML!LiteralBoolean = OclUndefined; 
		iv : UML!InstanceValue = OclUndefined; 
		en : UML!Enumeration = OclUndefined;
	}
	do
	{
		if(defaultValue.oclIsUndefined())
		{
			OclUndefined;
		}
		else if(namedType.oclIsUndefined() and not defaultValue.oclIsUndefined())--non named type with a default
		{
			if(leaf.type.oclIsTypeOf(YANG!IdentityRef))
			{
				--Note: Setting the instance value is very tricy as we don't have a matching rule to check 
				--against. Instead we must iterate the output model 
				iv <- UML!InstanceValue.newInstance();
				--TODO:The enumeration name match will change if we change the scheme for creating enumerations
				--based on identitynames
				iv.type <- UML!Enumeration.allInstances()->select(e|e.name=thisModule.getFullPathNameOfElement(leaf.type,'')+leaf.type.base.name)->first();
				iv.instance <-iv.type.ownedLiteral->select(e|e.name=defaultValue.value)->first();
				iv;
			}
			else if(leaf.type.oclIsTypeOf(YANG!LeafRef))
			{
				--TODO:not supported yet
				OclUndefined;
			}
			else if(leaf.type.oclIsTypeOf(YANG!Enumeration) or leaf.type.oclIsTypeOf(YANG!Bits))
			{
				--Note: Setting the instance value is very tricy as we don't have a matching rule to check 
				--against. Instead we must iterate the output model 				
				iv <- UML!InstanceValue.newInstance();
				iv.type <- UML!Enumeration.allInstances()->select(e|e.name=thisModule.getFullPathNameOfElement(leaf.type,''))->first();
				iv.instance <-iv.type.ownedLiteral->select(e|e.name=defaultValue.value)->first();
				iv;
			}			
			else if(leaf.type.oclIsTypeOf(YANG!UnionType))
			{
				--TODO:Support all types *except* empty and leafref
				
				--TODO:InstanceIdentifier
				
				--support for enum/bits
				if(leaf.type.unionOf->select(e|e.oclIsTypeOf(YANG!Enumeration))->select(e|e.enumLiterals->exists(f|f.name=defaultValue.value))->size() > 0)
				{
					iv <- UML!InstanceValue.newInstance();
					iv.type <- UML!Enumeration.allInstances()->select(e|e.name=thisModule.getFullPathNameOfElement(leaf.type.unionOf->select(e|e.oclIsTypeOf(YANG!Enumeration))->first(),''))->first();
					iv.instance <-iv.type.ownedLiteral->select(e|e.name=defaultValue.value)->first();
					iv;	
				}
				else if(leaf.type.unionOf->select(e|e.oclIsTypeOf(YANG!Bits))->select(e|e.bit->exists(f|f.name=defaultValue.value))->size() > 0)
				{
					iv <- UML!InstanceValue.newInstance();
					iv.type <- UML!Enumeration.allInstances()->select(e|e.name=thisModule.getFullPathNameOfElement(leaf.type.unionOf->select(e|e.oclIsTypeOf(YANG!Bits))->first(),''))->first();
					iv.instance <-iv.type.ownedLiteral->select(e|e.name=defaultValue.value)->first();
					iv;	
				}
				--it is quite complicated to see if the default is an identitiy, we must iterate over the identities and find a match for the identitiyref base and default value
				else if(UML!Enumeration.allInstances()->select(e|e.name=thisModule.getFullPathNameOfElement(leaf.type.unionOf->select(e|e.oclIsTypeOf(YANG!IdentityRef))->first().base,''))->select(e|e.ownedLiteral->exists(f|f.name=if(defaultValue.value.indexOf(':') > 0) then defaultValue.value.split(':')->at(2) else defaultValue.value endif))->size() > 0)
				{
					iv <- UML!InstanceValue.newInstance();
					iv.type <- UML!Enumeration.allInstances()->select(e|e.name=thisModule.getFullPathNameOfElement(leaf.type.unionOf->select(e|e.oclIsTypeOf(YANG!IdentityRef))->first().base,''))->first();
					--the default identitiy might be prefixed so manage this
					iv.instance <-iv.type.ownedLiteral->select(e|e.name=if(defaultValue.value.indexOf(':') > 0) then defaultValue.value.split(':')->at(2) else defaultValue.value endif)->first();
					iv;	
				}
				--Boolean,Inetgers & Strings are always seen as Strings as the grammar doesn't differentiate them properly. We just assign integers as
				--stings and later transforms can handle this. For booleans we check for the important values.
				else if(defaultValue.value = 'true' or defaultValue.value = 'false')
				{
					b <- UML!LiteralBoolean.newInstance();
					b.value <- defaultValue.value.debug('a').toBoolean().debug('b');
					b;		
				}
				else if(defaultValue.value.oclIsTypeOf(String) or defaultValue.value.oclIsTypeOf(Integer))--this case covers binary too
				{
					defaultValue.oclType();
					s <- UML!LiteralString.newInstance();
					s.value <- defaultValue.value;
					s;		
				}		
				else 
				{
					OclUndefined;
				}
				
			}				
			else if(leaf.type.oclIsTypeOf(YANG!Binary))
			{
				s <- UML!LiteralString.newInstance();
				s.value <- defaultValue.value;
				s;
			}		
			else if(leaf.type.oclIsTypeOf(YANG!InstanceIdentifier))
			{
				s <- UML!LiteralString.newInstance();
				s.value <- defaultValue.value;
				s;
			}			
			else
			{
				OclUndefined;	
			}		
		}
		else if(not namedType.oclIsUndefined() and not defaultValue.oclIsUndefined())--named type with a default
		{
			if(namedType.name = 'string')
			{
				s <- UML!LiteralString.newInstance();
				s.value <- defaultValue.value;
				s;	
			}
			else if(namedType.name = 'int8' or namedType.name = 'uint8' or namedType.name = 'int16' or namedType.name = 'uint16' or namedType.name = 'int32' or namedType.name = 'uint32' or namedType.name = 'int64' or namedType.name = 'uint64' or namedType.name = 'decimal64')
			{
				i <- UML!LiteralInteger.newInstance();
				i.value <- if defaultValue.value.oclIsTypeOf(String) then defaultValue.value.toInteger() else defaultValue.value endif;
				i;
			}
			else if(namedType.name = 'boolean')
			{
				b <- UML!LiteralBoolean.newInstance();
				b.value <- defaultValue.value.toBoolean();
				b;	
			}			
			else
			{
				OclUndefined;	
			}

		}
	}
}