{
		"name" : "MoMgcf" ,
		"ss7" : "false" ,
		"visible" : "true" ,
		"desc" : "\nData for the Media Gateway Controller.\n    " ,
		"filename" : "MoMgcfPOT.json" ,
		"max_entries" : "1" ,
		"modid" : "12356" ,
		"attrs" : {
				"mgcfId" : {
						"name" : "mgcfId" ,
						"keytype" : "ECIM_KEY" ,
						"keyorder" : "" ,
						"desc" : "The MoClass key of the mgcf" ,
						"types" : "EcimString" ,
						"default" : "" ,
						"category" : "OperatorConfigurable" ,
						"changereq" : "false" ,
						"visible" : "true" ,
						"maxaccess" : "read-only" ,
						"realtime" : "false"
				} ,
				"isupType" : {
						"name" : "isupType" ,
						"keytype" : "NONE_KEY" ,
						"keyorder" : "" ,
						"desc" : "\nSS7 protocol type selected in installation \npackage.                                    \n\no ITU   : ITU-ISUP\n\no ANSI  : ANSI-ISUP\n\no CHINA : CHINA-ISUP\n      " ,
						"types" : "enumSequence {IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>}" ,
						"default" : "" ,
						"category" : "OperatorConfigurable" ,
						"changereq" : "false" ,
						"visible" : "true" ,
						"maxaccess" : "read-write" ,
						"realtime" : "false"
				} ,
				"mgcOperationalState" : {
						"name" : "mgcOperationalState" ,
						"keytype" : "NONE_KEY" ,
						"keyorder" : "" ,
						"desc" :
						"\nOperational state of the MGC.\n\no   Disabled (1):  MGC is totally unable to \nprovide call service, i.e. all PSTN devices \nare in hardware blocked state and the MGC is \nunable to accept calls.                     \n\no   Enabled (2):  MGC is partially or fully \noperable and available for use, i.e. at \nleast one PSTN span is hardware deblocked \nand the MGC can accept calls.\n      "
						,
						"types" : "enumSequence {IN6!<unnamed>, IN6!<unnamed>}" ,
						"default" : "" ,
						"category" : "OperatorConfigurable" ,
						"changereq" : "true" ,
						"visible" : "true" ,
						"maxaccess" : "read-only" ,
						"realtime" : "false"
				} ,
				"mgcUsageState" : {
						"name" : "mgcUsageState" ,
						"keytype" : "NONE_KEY" ,
						"keyorder" : "" ,
						"desc" :
						"\nUsage state of the MGC.\n\no   Idle(1):  MGC is not currently in use \n(number of active PSTN and IP calls are \nequal to zero).                             \n\no   Active(2): MGC is running traffic \n(number of initiated PSTN and IP calls is at \nleast one).                                 \n\no   Busy(3): not supported.\n      "
						,
						"types" : "enumSequence {IN6!<unnamed>, IN6!<unnamed>}" ,
						"default" : "" ,
						"category" : "OperatorConfigurable" ,
						"changereq" : "false" ,
						"visible" : "true" ,
						"maxaccess" : "read-only" ,
						"realtime" : "false"
				} ,
				"mgcAdministrativeState" : {
						"name" : "mgcAdministrativeState" ,
						"keytype" : "NONE_KEY" ,
						"keyorder" : "" ,
						"desc" :
						"\nAdministrative state of the MGC.\n\no  Unlocked (3): PSTN devices are unlocked \nand the MGC accepts new calls.              \n\no  ShuttingDown (2): PSTN devices are \nmaintenance blocked, no new calls are \naccepted but the active calls are kept.     \n  \no  Locked (1): PSTN devices are reseted (all \nactive calls are released) and operator \nlocked (no new calls are accepted).\n      "
						,
						"types" : "enumSequence {IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>}" ,
						"default" : "" ,
						"category" : "OperatorConfigurable" ,
						"changereq" : "true" ,
						"visible" : "true" ,
						"maxaccess" : "read-only" ,
						"realtime" : "false"
				} ,
				"mgcActiveBladeSlotno" : {
						"name" : "mgcActiveBladeSlotno" ,
						"keytype" : "NONE_KEY" ,
						"keyorder" : "" ,
						"desc" : "\nDisplays the slot number for the active MGC blade.\n      " ,
						"types" : "derived0_25" ,
						"default" : "0" ,
						"category" : "OperatorConfigurable" ,
						"changereq" : "false" ,
						"visible" : "true" ,
						"maxaccess" : "read-only" ,
						"realtime" : "false"
				} ,
				"isrFE0" : {
						"name" : "isrFE0" ,
						"keytype" : "NONE_KEY" ,
						"keyorder" : "" ,
						"desc" : "\nDisplays blade name for the ISR FE instance 0, which is also known as the Mtpl2 FE Instance 0.\n      " ,
						"types" : "derived0_32_[A-Za-z0-9./:_-]{0,32}" ,
						"default" : "" ,
						"category" : "OperatorConfigurable" ,
						"changereq" : "false" ,
						"visible" : "true" ,
						"maxaccess" : "read-only" ,
						"realtime" : "false"
				} ,
				"isrFE2" : {
						"name" : "isrFE2" ,
						"keytype" : "NONE_KEY" ,
						"keyorder" : "" ,
						"desc" : "\nDisplays blade name for the ISR FE instance 2, which is also known as the Mtpl2 FE Instance 2.\n      " ,
						"types" : "derived0_32_[A-Za-z0-9./:_-]{0,32}" ,
						"default" : "" ,
						"category" : "OperatorConfigurable" ,
						"changereq" : "false" ,
						"visible" : "true" ,
						"maxaccess" : "read-only" ,
						"realtime" : "false"
				} ,
				"mgcHaState" : {
						"name" : "mgcHaState" ,
						"keytype" : "NONE_KEY" ,
						"keyorder" : "" ,
						"desc" :
						"\nSpecifies if a HA-system MGC is currently \nhandling traffic (master) or stand-by.\n\no   HaUnspecified (0): MGC is starting up, \nor not defined as a HA-MGC.                 \n\no   HaMaster (1)     : MGC is a master MGC \nhandling the traffic.                       \n\no   HaStandBy (2)    : MGC is a stand-by MGC \ncurrently not handling traffic.\n      "
						,
						"types" : "enumSequence {IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>}" ,
						"default" : "" ,
						"category" : "OperatorConfigurable" ,
						"changereq" : "true" ,
						"visible" : "true" ,
						"maxaccess" : "read-only" ,
						"realtime" : "false"
				} ,
				"mgcHostName" : {
						"name" : "mgcHostName" ,
						"keytype" : "NONE_KEY" ,
						"keyorder" : "" ,
						"desc" : "\nThe host name of MGC in node level to construct the 'node-data' in charging-info of P-Charging-Vector header.\n      " ,
						"types" : "derived0_32_[0-9A-Za-z.-]{0,32}" ,
						"default" : "" ,
						"category" : "OperatorConfigurable" ,
						"changereq" : "false" ,
						"visible" : "true" ,
						"maxaccess" : "read-write" ,
						"realtime" : "false"
				} ,
				"mgcForeignNetworkId" : {
						"name" : "mgcForeignNetworkId" ,
						"keytype" : "NONE_KEY" ,
						"keyorder" : "" ,
						"desc" : "\nThe Foreign Network Identifier of MGC node.\n      " ,
						"types" : "derived0_40_[A-Za-z0-9.-]{0,40}" ,
						"default" : "" ,
						"category" : "OperatorConfigurable" ,
						"changereq" : "false" ,
						"visible" : "true" ,
						"maxaccess" : "read-write" ,
						"realtime" : "false"
				} ,
				"mgcFullyQualifiedDomainName" : {
						"name" : "mgcFullyQualifiedDomainName" ,
						"keytype" : "NONE_KEY" ,
						"keyorder" : "" ,
						"desc" : "\nThis parameter defines the traffic IP address of the MGC except those used for SCTP. SCTP IP address is defined in the SCTP layer Local IP Address table.\n      " ,
						"types" : "EcimString" ,
						"default" : "" ,
						"category" : "OperatorConfigurable" ,
						"changereq" : "false" ,
						"visible" : "true" ,
						"maxaccess" : "read-write" ,
						"realtime" : "false"
				} ,
				"priorityTrafficOnly" : {
						"name" : "priorityTrafficOnly" ,
						"keytype" : "NONE_KEY" ,
						"keyorder" : "" ,
						"desc" :
						"\nThis field determines if MGC shall reject \nall calls that have no priority either based \non calling party's category or based on \ncalled number series.\n\no  true :  calls without priority are \nrejected                                    \n\no  false:  calls without priority are not \nrejected\n      "
						,
						"types" : "EcimBoolean" ,
						"default" : "false" ,
						"category" : "OperatorConfigurable" ,
						"changereq" : "false" ,
						"visible" : "true" ,
						"maxaccess" : "read-write" ,
						"realtime" : "false"
				} ,
				"countryCode" : {
						"name" : "countryCode" ,
						"keytype" : "NONE_KEY" ,
						"keyorder" : "" ,
						"desc" : "\nThis attribute defines the country code \n(CC) of the country where MGC is located.\n\nValid digits are 0..9\n      " ,
						"types" : "derived0_3_[0-9]{0,3}" ,
						"default" : "" ,
						"category" : "OperatorConfigurable" ,
						"changereq" : "false" ,
						"visible" : "true" ,
						"maxaccess" : "read-write" ,
						"realtime" : "false"
				} ,
				"workMode" : {
						"name" : "workMode" ,
						"keytype" : "NONE_KEY" ,
						"keyorder" : "" ,
						"desc" :
						"\nThis parameter is used to indicate whether MGC set up the SIP-SIP call by using the MGW or not. It is a node level parameter which cooperate with SIP Profile's SIP Response Code For No Common Codec when 'Smart Mode' is in use.\neAlwaysUseMediaGateWay (0): This value indicates MGC establish the SIP-SIP call, always use MGW to process media message. Support audio codec transcoding. \neSmartMode (1): This value indicates MGC establish the SIP-SIP call without using MGW at first. When the received SIP response code match the configured SIP Profile's SIP Response Code For No Common Codec, MGC will re-establish the call by using the MGW. Otherwise the call would be released.\n      "
						,
						"types" : "enumSequence {IN6!<unnamed>, IN6!<unnamed>}" ,
						"default" : "" ,
						"category" : "OperatorConfigurable" ,
						"changereq" : "false" ,
						"visible" : "true" ,
						"maxaccess" : "read-write" ,
						"realtime" : "false"
				} ,
				"dnsServerAddressRead" : {
						"name" : "dnsServerAddressRead" ,
						"keytype" : "NONE_KEY" ,
						"keyorder" : "" ,
						"desc" :
						"\nThis parameter defines whether the DSN \nserver address is read from the system \nresolv.conf or from the 'MGC system' table.\n\no  FromSystemResolvConf(0) : The DNS \nServers IP Address is read from system \nconfiguration file, resolv.conf.            \n\no  FromMgcApplication(1) : The DNS Servers \nIP Address is read from the 'MGC system' \ntable, from attributes 'Primary DNS Server' \nand 'Secondary DNS Server'.\n      "
						,
						"types" : "enumSequence {IN6!<unnamed>, IN6!<unnamed>}" ,
						"default" : "" ,
						"category" : "OperatorConfigurable" ,
						"changereq" : "false" ,
						"visible" : "false" ,
						"maxaccess" : "read-write" ,
						"realtime" : "false"
				} ,
				"primaryDnsServerIpAddress" : {
						"name" : "primaryDnsServerIpAddress" ,
						"keytype" : "NONE_KEY" ,
						"keyorder" : "" ,
						"desc" : "\nThis variable holds the MGC's primary \nDNS server IPv4 address in dotted decimal \nformat.\n\nE.g. 0.0.0.0 - 255.255.255.255\n      " ,
						"types" : "EcimString" ,
						"default" : "" ,
						"category" : "OperatorConfigurable" ,
						"changereq" : "false" ,
						"visible" : "true" ,
						"maxaccess" : "read-write" ,
						"realtime" : "false"
				} ,
				"secondaryDnsServerIpAddress" : {
						"name" : "secondaryDnsServerIpAddress" ,
						"keytype" : "NONE_KEY" ,
						"keyorder" : "" ,
						"desc" : "\nThis variable holds the MGC's secondary\nDNS server IPv4 address in dotted decimal \nformat.\n\nE.g. 0.0.0.0 - 255.255.255.255\n      " ,
						"types" : "EcimString" ,
						"default" : "" ,
						"category" : "OperatorConfigurable" ,
						"changereq" : "false" ,
						"visible" : "true" ,
						"maxaccess" : "read-write" ,
						"realtime" : "false"
				} ,
				"localSctpPort" : {
						"name" : "localSctpPort" ,
						"keytype" : "NONE_KEY" ,
						"keyorder" : "" ,
						"desc" : "\nThis variable holds the port number of\nthe MGC's SCTP stack when MGC operates\nin server mode.\n      " ,
						"types" : "derived1_65535" ,
						"default" : "2944" ,
						"category" : "OperatorConfigurable" ,
						"changereq" : "false" ,
						"visible" : "true" ,
						"maxaccess" : "read-write" ,
						"realtime" : "false"
				} ,
				"toneInterworkingTimeout" : {
						"name" : "toneInterworkingTimeout" ,
						"keytype" : "NONE_KEY" ,
						"keyorder" : "" ,
						"desc" :
						"\nTimeout (in milliseconds) for releasing the \nconnection in case tone interworking (i.e. \ntone sending) is required by incoming route \nat disconnection of call. \n\nTimer is started when tone sending from MG \nis started. At timeout call is disconnected.\n\no   '0' : no tone interworking\n\no   '1' - '90000': timeout in milliseconds\n\nRecommended value is 15 000 ms.\n      "
						,
						"types" : "derived0_90000" ,
						"default" : "15000" ,
						"category" : "OperatorConfigurable" ,
						"changereq" : "false" ,
						"visible" : "true" ,
						"maxaccess" : "read-write" ,
						"realtime" : "false"
				} ,
				"howToTreatUdi64kCall" : {
						"name" : "howToTreatUdi64kCall" ,
						"keytype" : "NONE_KEY" ,
						"keyorder" : "" ,
						"desc" :
						"\nThis is information for MGC if the UDI64k \n(TMR) indicated calls shall be treated as \nmultimedia or as data (clearmode) calls.\n\no (0) : only the UDI64k (TMR) with \ncorrect H.223/H.245 indication is treated as \nmultimedia call. All other UDI64k \nindications are treated as data calls.      \n\no (1) : all the calls indicated by \nUDI64k (TMR) are treated as multimedia \ncalls, with the exception of calls where \nan explicit non H.223/H.245 indication (in \nUSI, layer 1 protocol) is received. These \ncalls are treated as data calls.            \n\no (2) : all the calls indicated by UDI64k \n(TMR) are treated as data calls.\n      "
						,
						"types" : "derived0_2" ,
						"default" : "0" ,
						"category" : "OperatorConfigurable" ,
						"changereq" : "false" ,
						"visible" : "true" ,
						"maxaccess" : "read-write" ,
						"realtime" : "false"
				} ,
				"initialConnectionModeForVoip" : {
						"name" : "initialConnectionModeForVoip" ,
						"keytype" : "NONE_KEY" ,
						"keyorder" : "" ,
						"desc" :
						"\nThis attribute defines how media stream \nshall be through connected in MG at seizure \nof resources in MG for VOIP calls.\n\no   Inactive (0) : No through connection of \n    media stream shall be done.\n\no   Backward (1) : Through connect media \n    stream in backward direction.\n      "
						,
						"types" : "enumSequence {IN6!<unnamed>, IN6!<unnamed>}" ,
						"default" : "" ,
						"category" : "OperatorConfigurable" ,
						"changereq" : "false" ,
						"visible" : "true" ,
						"maxaccess" : "read-write" ,
						"realtime" : "false"
				} ,
				"pmDelay" : {
						"name" : "pmDelay" ,
						"keytype" : "NONE_KEY" ,
						"keyorder" : "" ,
						"desc" : "\nPerformance Management Counter values are \nnot real time read and this parameter       \ndetermines how much delay there can be.\n\nRange is 10000 - 300000 milliseconds, \ndefault is 10000 ms.\n      " ,
						"types" : "derived10000_300000" ,
						"default" : "10000" ,
						"category" : "OperatorConfigurable" ,
						"changereq" : "false" ,
						"visible" : "true" ,
						"maxaccess" : "read-write" ,
						"realtime" : "false"
				} ,
				"logLevel" : {
						"name" : "logLevel" ,
						"keytype" : "NONE_KEY" ,
						"keyorder" : "" ,
						"desc" :
						"\nThis is common log level for the MGC.        \n\no   Emergency (7): Information about an    \nevent that leads to serious failure. MGC \nis unable to process ANY calls or to do \nANY charging. This map to Fatal level in \nthe log file.                               \n\no   Alert (6): Information about an event \nthat also leads to serious failure. MGC \nis/will be unable to take FURTHER calls (new \ncalls) or to do FURTHER charging (for new \ncalls). This map to Alert and Fatal levels \nin the log file.                            \n\no  Error (4): Information about an \nevent/state that leads/will lead to an      \nindividual dropped call/failed transaction \n(that will affect the end-user) and is \nLIKELY to lead to more dropped calls/failed \ntransactions in the near future. This map \nto Error, Alert and Fatal levels in the log \nfile.                                       \n\no  Warning (3): Information about an \nabnormal event/state that does not lead to  \ndropped call/failed transaction (that \naffects the end-user) but should be fixed \nwhenever possible e.g. missing configuration \ndata. This map to Warning, Error, Alert and \nFatal levels in the log file.               \n\no  Notice (2): Significant information \nabout call progress. Both successful and \nunsuccessful call-level information. This \nmaps to Notice, Warning, Error, Alert and \nFatal levels in the log file.               \n\no  Debug(0): Logging level is Debug Level. This map to DebugAll (Debug, \nInfo, Notice, Warning, Error, Alert and \nFatal levels) in the log file.\n      "
						,
						"types" : "enumSequence {IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>}" ,
						"default" : "" ,
						"category" : "OperatorConfigurable" ,
						"changereq" : "false" ,
						"visible" : "true" ,
						"maxaccess" : "read-write" ,
						"realtime" : "true"
				} ,
				"mgcOAMLock" : {
						"name" : "mgcOAMLock" ,
						"keytype" : "NONE_KEY" ,
						"keyorder" : "" ,
						"desc" : "\nOperation and maintenance interface for MGC \nconfiguration.                              \n\no  0   - SNMP\n\no  1.. - Netconf (session-id)\n      " ,
						"types" : "derived0_4294967295" ,
						"default" : "0" ,
						"category" : "OperatorConfigurable" ,
						"changereq" : "false" ,
						"visible" : "true" ,
						"maxaccess" : "read-only" ,
						"realtime" : "true"
				} ,
				"emanateIpAddress" : {
						"name" : "emanateIpAddress" ,
						"keytype" : "NONE_KEY" ,
						"keyorder" : "" ,
						"desc" : "\nThis attribute shows SNMP master agent's \nIPv4 address. Cannot be changed during \noperation.\n      " ,
						"types" : "EcimString" ,
						"default" : "" ,
						"category" : "OperatorConfigurable" ,
						"changereq" : "false" ,
						"visible" : "true" ,
						"maxaccess" : "read-only" ,
						"realtime" : "false"
				} ,
				"rlspinterval" : {
						"name" : "rlspinterval" ,
						"keytype" : "NONE_KEY" ,
						"keyorder" : "" ,
						"desc" :
						"\nValue of this attribue decided the interval \nbetween heartbeats sent by MGC blades \ntowards the ethernet switch for purposes of \ndiagnosing lan failures. It is read from IS \ncommon parameters and populated in MO during \nthe boot time and LanFmMonitor uses it to \nset the values correctly in the bonding \ndriver during its initialization.\n      "
						,
						"types" : "EcimUInt64" ,
						"default" : "20" ,
						"category" : "OperatorConfigurable" ,
						"changereq" : "false" ,
						"visible" : "false" ,
						"maxaccess" : "read-only" ,
						"realtime" : "false"
				} ,
				"sisIpAddress" : {
						"name" : "sisIpAddress" ,
						"keytype" : "NONE_KEY" ,
						"keyorder" : "" ,
						"desc" : "\nThis attribute is used by application to \nread the SNMP manager's IP address for \nsending traps.\n      " ,
						"types" : "EcimString" ,
						"default" : "" ,
						"category" : "OperatorConfigurable" ,
						"changereq" : "false" ,
						"visible" : "false" ,
						"maxaccess" : "read-only" ,
						"realtime" : "false"
				} ,
				"mgcDNSCacheEnable" : {
						"name" : "mgcDNSCacheEnable" ,
						"keytype" : "NONE_KEY" ,
						"keyorder" : "" ,
						"desc" : "\nEnable/disable DNS cache should be \nconfigurable. If it's set to be disabled, \nDNS cache should be cleaned.\n      " ,
						"types" : "EcimBoolean" ,
						"default" : "false" ,
						"category" : "OperatorConfigurable" ,
						"changereq" : "false" ,
						"visible" : "true" ,
						"maxaccess" : "read-write" ,
						"realtime" : "false"
				} ,
				"mgcDNSFailOverTimer" : {
						"name" : "mgcDNSFailOverTimer" ,
						"keytype" : "NONE_KEY" ,
						"keyorder" : "" ,
						"desc" :
						"\nTimer (In milliseconds) for DNS server \nfailover. It starts when a DNS query is sent \nto a DNS server. When it times out and no \nresponse is got from the DNS server, the \nquery will be resent to the next DNS server.\n      "
						,
						"types" : "derived0_5000" ,
						"default" : "30" ,
						"category" : "OperatorConfigurable" ,
						"changereq" : "false" ,
						"visible" : "true" ,
						"maxaccess" : "read-write" ,
						"realtime" : "false"
				} ,
				"isupTypeSIPI" : {
						"name" : "isupTypeSIPI" ,
						"keytype" : "NONE_KEY" ,
						"keyorder" : "" ,
						"desc" :
						"\nThis attribute is used to indicate the ISUP \ntype of ISUP MIME in SIP-I message supported \nby MGC.                                     \n\nIn incoming side, if MGC support SIP-I and \nthe ISUP type of ISUP MIME in SIP-I message \nis same to this parameter, the call is \naccepted. If the type is not same to this \nparameter, the call will be rejected.       \n\nIn outgoing side, if MGC support SIP-I, MGC \nwill set the ISUP type in SIP-I message \naccording to this parameter.                \n\neUnknownISUP(0): Indicate the ISUP type of \nISUP MIME in SIP-I message, is unkown or not \nsupport by MGC. Used internal, not visible \nto user and not appear in GUI.              \n\neITUISUP(1): Indicate MGC to support the \nISUP type of ISUP MIME in SIP-I message is \nITU-T ISUP.                                 \n\neANSIISUP(2): Indicate MGC to support the \nISUP type of ISUP MIME in SIP-I message is \nANSI ISUP.                                  \n\neCHINAISUP(4): Indicate MGC to support the \nISUP type of ISUP MIME in SIP-I message is \nChinese ISUP.\n\nRefer to SIP Profile's Use Isup Transparency.\n      "
						,
						"types" : "enumSequence {IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>}" ,
						"default" : "" ,
						"category" : "OperatorConfigurable" ,
						"changereq" : "false" ,
						"visible" : "true" ,
						"maxaccess" : "read-write" ,
						"realtime" : "false"
				} ,
				"maxNonSupervisedSessionDuration" : {
						"name" : "maxNonSupervisedSessionDuration" ,
						"keytype" : "NONE_KEY" ,
						"keyorder" : "" ,
						"desc" : "\nSession Duration Timer is started when a \ncall is established, the call will be \nreleased when the timer expires.            \nrange: 0-48 hours\ndefault:0\n      " ,
						"types" : "derived0_48" ,
						"default" : "0" ,
						"category" : "OperatorConfigurable" ,
						"changereq" : "false" ,
						"visible" : "true" ,
						"maxaccess" : "read-write" ,
						"realtime" : "false"
				} ,
				"sessionDurationTimerSwitch" : {
						"name" : "sessionDurationTimerSwitch" ,
						"keytype" : "NONE_KEY" ,
						"keyorder" : "" ,
						"desc" : "\nSession Duration Timer feature can be switch \non or off.                                  \nDefault: switch off\nfalse: switch off\ntrue:  switch on\n      " ,
						"types" : "EcimBoolean" ,
						"default" : "true" ,
						"category" : "OperatorConfigurable" ,
						"changereq" : "false" ,
						"visible" : "false" ,
						"maxaccess" : "read-write" ,
						"realtime" : "false"
				} ,
				"mgcOAMChargingIpAddress" : {
						"name" : "mgcOAMChargingIpAddress" ,
						"keytype" : "NONE_KEY" ,
						"keyorder" : "" ,
						"desc" : "\nThis attribute is the IP address of the \nseparate VLAN for charging.\n      " ,
						"types" : "EcimString" ,
						"default" : "" ,
						"category" : "OperatorConfigurable" ,
						"changereq" : "false" ,
						"visible" : "true" ,
						"maxaccess" : "read-write" ,
						"realtime" : "false"
				} ,
				"mgcOAMLock2" : {
						"name" : "mgcOAMLock2" ,
						"keytype" : "NONE_KEY" ,
						"keyorder" : "" ,
						"desc" : "\nInterface lock handler.                      \n\no  0   - Netconf operation\n\no  42  - GUI operation\n      " ,
						"types" : "derived0_4294967295" ,
						"default" : "0" ,
						"category" : "OperatorConfigurable" ,
						"changereq" : "false" ,
						"visible" : "true" ,
						"maxaccess" : "read-write" ,
						"realtime" : "false"
				} ,
				"emergencyCallTrunkReservation" : {
						"name" : "emergencyCallTrunkReservation" ,
						"keytype" : "NONE_KEY" ,
						"keyorder" : "" ,
						"desc" :
						"\nThe MGC must be possible to keep an adequate number of circuits to the PSTN free, whereby the free circuit of a bundle is reserved for emergency call only. To achieve this purpose, several reservation methods were implemented in MGC.\n\nDynamic: When this method is choosed, MGC will reserve one additional circuit (starting with 1 circuit) for emergency call per trunk group (resource group) dynamically. If this circuit is taken by an emergency call then trunk reservation will immediately reserve another circuit for emmergency call. If all circuits in the trunk group are busy then the next relased circuit is reserved for emmergency call.\n\nThreshold: When this method is choosed, MGC will do trunk reservation for emergency call via threshold limit setting('High Water Threshold Percentage' and 'Low Water Threshold Percentage') per 'ISUP Node Connection'(a pair of one OPC and one DPC). 'High Water Threshold Percentage' means High Threshold percentage of max. number of CIC?s in use. 'Low Water Threshold Percentage' means Low Threshold percentage of max. number of CIC?s in use. MGC would proceed the call like below when circuits in used have been over the threshold.\n1. When the number of circuits in used is over threshold value of 'High Water Threshold Percentage', all incoming calls from both SIP and ISUP will be rejected with cause ?circuits congestion?, except emergency calls.\n2. When the number of circuits in used backs below threshold value of 'Low Water Threshold Percentage', all calls could be accepted.\n\nNone: When this method is choosed, no circuit will be reserved for emergency call.\n      "
						,
						"types" : "enumSequence {IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>}" ,
						"default" : "" ,
						"category" : "OperatorConfigurable" ,
						"changereq" : "false" ,
						"visible" : "true" ,
						"maxaccess" : "read-write" ,
						"realtime" : "false"
				} ,
				"boardType" : {
						"name" : "boardType" ,
						"keytype" : "NONE_KEY" ,
						"keyorder" : "" ,
						"desc" : "" ,
						"types" : "enumSequence {IN6!<unnamed>, IN6!<unnamed>}" ,
						"default" : "" ,
						"category" : "OperatorConfigurable" ,
						"changereq" : "false" ,
						"visible" : "true" ,
						"maxaccess" : "read-write" ,
						"realtime" : "false"
				} ,
				"supportE2ERedundancySwitch" : {
						"name" : "supportE2ERedundancySwitch" ,
						"keytype" : "NONE_KEY" ,
						"keyorder" : "" ,
						"desc" :
						"\nThis parameter indicates whether End to End redundancy feature is enabled or not and what kind of SIP response would be sent by MGC in any one of below scenarios:\na) All H.248 SCTP associations between MGC and MGWs are unavailable.\nb) No MGW registered to MGC. \nc) All MGWs are locked from MGW side.\nd) MGW registered to MGC but no available device is registered to MGC or no available device found during MGW audit procedure. \ne) All devices on all MGWs are lock from MGW side.\nf) All MGWs are lock from MGC side.\ng) All devices on all MGWs are lock from MGC side.\nh) All devices on all MGWs are hardware/maintenance blocked from remote PSTN exchanges on ISUP level.\n \ntrue: E2E Redundancy is enabled, MGC send SIP 503 response.\nfalse: E2E Redundancy is disable, MGC send SIP 480 response.\n \nDefault value is false.\n      "
						,
						"types" : "EcimBoolean" ,
						"default" : "false" ,
						"category" : "OperatorConfigurable" ,
						"changereq" : "false" ,
						"visible" : "true" ,
						"maxaccess" : "read-write" ,
						"realtime" : "false"
				} ,
				"customizeDTMFPayloadTypeNumber" : {
						"name" : "customizeDTMFPayloadTypeNumber" ,
						"keytype" : "NONE_KEY" ,
						"keyorder" : "" ,
						"desc" :
						"\nMGC is able to initiate SDP offer with configured Payload Type number for telephone-event codec.\n\nTwo possible values are provided as below:\n99(e99):\nPayload Type Number of Codec telephone-event is set to 99.\n\n101(e101):\nPayload Type Number of Codec telephone-event is set to 101.\n      "
						,
						"types" : "enumSequence {IN6!<unnamed>, IN6!<unnamed>}" ,
						"default" : "" ,
						"category" : "OperatorConfigurable" ,
						"changereq" : "false" ,
						"visible" : "true" ,
						"maxaccess" : "read-write" ,
						"realtime" : "false"
				}
		} ,
		"actions" : {
				"mgcAction" : {
						"name" : "mgcAction" ,
						"admOpId" : "0" ,
						"paras" : {
								"mgcActionValue" : {
										"name" : "mgcActionValue" ,
										"types" :
										"enumSequence {IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>}"
										,
										"default" : ""
								}
						} ,
						"result" : {
								"types" : "EcimString" ,
								"default" : ""
						}
				} ,
				"mgcDummySS7RestartAction" : {
						"name" : "mgcDummySS7RestartAction" ,
						"admOpId" : "0" ,
						"paras" : {
								"mgcDummySS7RestartActionValue" : {
										"name" : "mgcDummySS7RestartActionValue" ,
										"types" : "EcimString" ,
										"default" : ""
								}
						} ,
						"result" : {
								"types" : "EcimString" ,
								"default" : ""
						}
				}
		} ,
		"codecs" : {
		} ,
		"brs" : {
		} ,
		"enums" : {
				"enumSequence {IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>}" : {
						"name" : "enumSequence {IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>}" ,
						"attrs" : {
								"eForcedLocking" : {
										"default" : "1" ,
										"name" : "eForcedLocking"
								} ,
								"eGracefulLocking" : {
										"default" : "2" ,
										"name" : "eGracefulLocking"
								} ,
								"eUnlocking" : {
										"default" : "4" ,
										"name" : "eUnlocking"
								} ,
								"eReady" : {
										"default" : "3" ,
										"name" : "eReady"
								}
						}
				} ,
				"enumSequence {IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>}" : {
						"name" : "enumSequence {IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>}" ,
						"attrs" : {
								"eLow" : {
										"default" : "2" ,
										"name" : "eLow"
								} ,
								"eMedium" : {
										"default" : "3" ,
										"name" : "eMedium"
								} ,
								"eHigh" : {
										"default" : "1" ,
										"name" : "eHigh"
								}
						}
				} ,
				"enumSequence {IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>}"
				: {
						"name" :
						"enumSequence {IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>}"
						,
						"attrs" : {
								"eForcedLocking" : {
										"default" : "17" ,
										"name" : "eForcedLocking"
								} ,
								"eGracefulLocking" : {
										"default" : "16" ,
										"name" : "eGracefulLocking"
								} ,
								"eUnlocking" : {
										"default" : "1" ,
										"name" : "eUnlocking"
								} ,
								"eSaveActiveConfig" : {
										"default" : "4" ,
										"name" : "eSaveActiveConfig"
								} ,
								"eRestarting" : {
										"default" : "5" ,
										"name" : "eRestarting"
								} ,
								"eReady" : {
										"default" : "12" ,
										"name" : "eReady"
								} ,
								"eHaSwitchOver" : {
										"default" : "15" ,
										"name" : "eHaSwitchOver"
								} ,
								"eReInitiateSs7Config" : {
										"default" : "8" ,
										"name" : "eReInitiateSs7Config"
								} ,
								"eReInitiateFeConfig" : {
										"default" : "11" ,
										"name" : "eReInitiateFeConfig"
								} ,
								"eCancelSs7MoUpdates" : {
										"default" : "19" ,
										"name" : "eCancelSs7MoUpdates"
								} ,
								"eProceeding" : {
										"default" : "13" ,
										"name" : "eProceeding"
								} ,
								"eReInitiateSctpConfig" : {
										"default" : "9" ,
										"name" : "eReInitiateSctpConfig"
								} ,
								"eSaveSS7ConfigAndRestart" : {
										"default" : "2" ,
										"name" : "eSaveSS7ConfigAndRestart"
								} ,
								"eResetSs7Statistics" : {
										"default" : "7" ,
										"name" : "eResetSs7Statistics"
								} ,
								"eMgcInfoCollect" : {
										"default" : "14" ,
										"name" : "eMgcInfoCollect"
								} ,
								"eCleanSDRMemory" : {
										"default" : "18" ,
										"name" : "eCleanSDRMemory"
								} ,
								"eActivateANumber" : {
										"default" : "27" ,
										"name" : "eActivateANumber"
								} ,
								"eActivateANumberPre" : {
										"default" : "25" ,
										"name" : "eActivateANumberPre"
								} ,
								"eActivateBNumber" : {
										"default" : "24" ,
										"name" : "eActivateBNumber"
								} ,
								"eActivateBNumberPre" : {
										"default" : "23" ,
										"name" : "eActivateBNumberPre"
								} ,
								"eActivateRoute" : {
										"default" : "22" ,
										"name" : "eActivateRoute"
								} ,
								"eActivateRouteAnalysisRoute" : {
										"default" : "21" ,
										"name" : "eActivateRouteAnalysisRoute"
								} ,
								"eSaveAllConfig" : {
										"default" : "3" ,
										"name" : "eSaveAllConfig"
								}
						}
				} ,
				"enumSequence {IN6!<unnamed>, IN6!<unnamed>}" : {
						"name" : "enumSequence {IN6!<unnamed>, IN6!<unnamed>}" ,
						"attrs" : {
								"eKeepBeginTime" : {
										"default" : "1" ,
										"name" : "eKeepBeginTime"
								} ,
								"eResetBeginTime" : {
										"default" : "2" ,
										"name" : "eResetBeginTime"
								}
						}
				} ,
				"enumSequence {IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>}" : {
						"name" : "enumSequence {IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>, IN6!<unnamed>}" ,
						"attrs" : {
								"twentyfour" : {
										"default" : "6" ,
										"name" : "twentyfour"
								} ,
								"fifteen" : {
										"default" : "1" ,
										"name" : "fifteen"
								} ,
								"thirty" : {
										"default" : "4" ,
										"name" : "thirty"
								} ,
								"five" : {
										"default" : "2" ,
										"name" : "five"
								} ,
								"one" : {
										"default" : "3" ,
										"name" : "one"
								} ,
								"twelve" : {
										"default" : "5" ,
										"name" : "twelve"
								}
						}
				}
		} ,
		"deriveds" : {
				"derived0_4294967295" : {
						"name" : "derived0_4294967295" ,
						"stereotypes" : "EcimDerivedInteger" ,
						"basetype" : "EcimUInt64" ,
						"length" : "" ,
						"range" : "0..4294967295" ,
						"pattern" : ""
				} ,
				"derived0_5000" : {
						"name" : "derived0_5000" ,
						"stereotypes" : "EcimDerivedInteger" ,
						"basetype" : "EcimUInt64" ,
						"length" : "" ,
						"range" : "0..5000" ,
						"pattern" : ""
				} ,
				"derived0_48" : {
						"name" : "derived0_48" ,
						"stereotypes" : "EcimDerivedInteger" ,
						"basetype" : "EcimUInt64" ,
						"length" : "" ,
						"range" : "0..48" ,
						"pattern" : ""
				} ,
				"derived0_32_[A-Za-z0-9./:_-]{0,32}" : {
						"name" : "derived0_32_[A-Za-z0-9./:_-]{0,32}" ,
						"stereotypes" : "EcimDerivedString" ,
						"basetype" : "EcimString" ,
						"length" : "0..32" ,
						"range" : "" ,
						"pattern" : "[A-Za-z0-9./:_-]{0,32}"
				} ,
				"derived10000_300000" : {
						"name" : "derived10000_300000" ,
						"stereotypes" : "EcimDerivedInteger" ,
						"basetype" : "EcimUInt64" ,
						"length" : "" ,
						"range" : "10000..300000" ,
						"pattern" : ""
				} ,
				"derived0_32_[0-9A-Za-z.-]{0,32}" : {
						"name" : "derived0_32_[0-9A-Za-z.-]{0,32}" ,
						"stereotypes" : "EcimDerivedString" ,
						"basetype" : "EcimString" ,
						"length" : "0..32" ,
						"range" : "" ,
						"pattern" : "[0-9A-Za-z.-]{0,32}"
				} ,
				"derived1_65535" : {
						"name" : "derived1_65535" ,
						"stereotypes" : "EcimDerivedInteger" ,
						"basetype" : "EcimUInt64" ,
						"length" : "" ,
						"range" : "1..65535" ,
						"pattern" : ""
				} ,
				"derived0_90000" : {
						"name" : "derived0_90000" ,
						"stereotypes" : "EcimDerivedInteger" ,
						"basetype" : "EcimUInt64" ,
						"length" : "" ,
						"range" : "0..90000" ,
						"pattern" : ""
				} ,
				"derived0_40_[A-Za-z0-9.-]{0,40}" : {
						"name" : "derived0_40_[A-Za-z0-9.-]{0,40}" ,
						"stereotypes" : "EcimDerivedString" ,
						"basetype" : "EcimString" ,
						"length" : "0..40" ,
						"range" : "" ,
						"pattern" : "[A-Za-z0-9.-]{0,40}"
				} ,
				"derived0_2" : {
						"name" : "derived0_2" ,
						"stereotypes" : "EcimDerivedInteger" ,
						"basetype" : "EcimUInt64" ,
						"length" : "" ,
						"range" : "0..2" ,
						"pattern" : ""
				} ,
				"derived0_25" : {
						"name" : "derived0_25" ,
						"stereotypes" : "EcimDerivedInteger" ,
						"basetype" : "EcimUInt64" ,
						"length" : "" ,
						"range" : "0..25" ,
						"pattern" : ""
				} ,
				"derived0_3_[0-9]{0,3}" : {
						"name" : "derived0_3_[0-9]{0,3}" ,
						"stereotypes" : "EcimDerivedString" ,
						"basetype" : "EcimString" ,
						"length" : "0..3" ,
						"range" : "" ,
						"pattern" : "[0-9]{0,3}"
				}
		}
}