/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package TspMim.validation;

import TspMim.CachedType;
import TspMim.DataTypeType;
import TspMim.DeletableType;
import TspMim.DescriptionType;
import TspMim.ExtensionType;
import TspMim.HideInConfdType;
import TspMim.HideInLdapType;
import TspMim.KeyType;
import TspMim.MandatoryType;
import TspMim.NonPersistentType;
import TspMim.ReadOnlyType;
import TspMim.RestrictedType;
import TspMim.RuntimeType;
import TspMim.SensitiveType;
import TspMim.SystemMaintainedType;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.util.FeatureMap;

/**
 * A sample validator interface for {@link TspMim.AttributeType}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface AttributeTypeValidator {
    boolean validate();

    boolean validateDescription(DescriptionType value);
    boolean validateExtension(EList<ExtensionType> value);
    boolean validateLdapObjectId(String value);
    boolean validateDataType(DataTypeType value);
    boolean validateGroup(FeatureMap value);
    boolean validateMandatory(EList<MandatoryType> value);
    boolean validateRestricted(EList<RestrictedType> value);
    boolean validateKey(EList<KeyType> value);
    boolean validateInitialValue(EList<String> value);
    boolean validateReadOnly(EList<ReadOnlyType> value);
    boolean validateNonPersistent(EList<NonPersistentType> value);
    boolean validateSensitive(EList<SensitiveType> value);
    boolean validateHideInConfd(EList<HideInConfdType> value);
    boolean validateHideInLdap(EList<HideInLdapType> value);
    boolean validateSystemMaintained(EList<SystemMaintainedType> value);
    boolean validateRuntime(EList<RuntimeType> value);
    boolean validateCached(EList<CachedType> value);
    boolean validateDeletable(EList<DeletableType> value);
    boolean validateFrom(Object value);
    boolean validateName(Object value);
}
