-- /**
-- * This transformation creates MP ExceptionType(s) from EcimExceptions(s) when called
-- *
-- *
-- * superimposition-dependencies: ECIMtoMP 
-- * library-dependencies: HelperFunctions
-- *
-- * Author: Ronan Barrett
-- * Date: 21/03/2011
-- */

-- @atlcompiler atl2006
-- @path MP=/com.ericsson.ecim.edm/model/Mp.ecore
-- @nsURI PROFILE=http://www.eclipse.org/uml2/2.1.0/UML
-- @nsURI UML=http://www.eclipse.org/uml2/2.1.0/UML

module ExceptionMappingRules;
create OUT : MP from IN : UML;

-- Map EcimExceptions(s) to MP ExceptionType(s) when called
rule EcimExceptionToExceptionType(s: UML!Class)
{
--	from s: UML!Class(not s.isAbstract and s.hasStereotype('ECIM Base Profile::EcimException') and (s.getNearestPackage().hasStereotype('ECIM Base Profile::EcimMom') or s.getNearestPackage().hasStereotype('ECIM Base Profile::EcimLibrary')))		
	using 
	{
		domainExtensions : Set(UML!Property) = thisModule.getDomainExtensions(s);	
	}	
	to t: MP!ExceptionType
	(
		description <- thisModule.hasDescription(s),
		name <- thisModule.setCurrentPackage(s.getNearestPackage()),-- we wrap/store the current mim package to be reused for structs members and exception parameters			
		name <- s.name,
		
		exceptionParameter <- s.ownedAttribute
		->select(e|e.hasStereotypeApplied())--ignore properties with no stereotypes as these are association properties
		->collect(e|thisModule.PropertyToExceptionParameterType(e)),
		
		--Supported CPP specific properties
		deprecated <- if thisModule.isCPP() then thisModule.isDeprecated(s) else OclUndefined endif	
		
		--CPP properties that are not supported
		--applicationTag <-
		--domainExtension <- 
	)
	do
	{
		--generate domainExtensions if there are any
		if (domainExtensions->size() > 0)
		{
			--before creating the extensions we group them by domain so that they can be outputted together
			t.domainExtension <- domainExtensions->collect(e|thisModule.hasDomain(e))->asSet()->collect(e|thisModule.CreateGenericDomainExtensionType(e,domainExtensions,s));
		}
		t;
	}		
}

lazy rule PropertyToExceptionParameterType
{
	from s: UML!Property(s.oclIsTypeOf(UML!Property) and s.hasStereotype('ECIM Base Profile::EcimExceptionParameter'))		
	to t: MP!ExceptionParameterType
	(
		name <- s.name,
		description <- thisModule.hasDescription(s),
		dataType <- thisModule.ResolveDataType(s)
		
		--CPP properties that are not supported
		--applicationTag <-		
	)
}	